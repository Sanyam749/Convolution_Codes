clc;
clearvars;

function [encoded, G] = convolutional_encode(rate, Kc, ip)
    ip = [ip, zeros(1, Kc - 1)]; % Adding 0s to flush

    % Creating the G matrix for the given rate and constraint length
    switch rate
        case 1/2
            switch Kc
                case 3
                    G = [1 0 1;
                         1 1 1];
                otherwise
                    error('Unsupported parameter for Kc at rate 1/2');
            end
        case 1/3
            switch Kc
                case 4
                    G = [1 1 0 1;
                         1 0 1 1;
                         1 1 1 1];
                case 6
                    G = [1 1 1 0 0 1;
                         1 1 0 1 0 1;
                         1 0 1 1 1 1];
                otherwise
                    error('Unsupported parameter for Kc at rate 1/3');
            end
        otherwise
            error('Unsupported rate');
    end

    [~, Kc] = size(G); % To reverify the constraint length
    buff = zeros(1, Kc);
    encoded = [];

    for bit = ip
        buff = [bit, buff(1:end-1)];
        
        % Binary matrix multiplication:
        % i) Multiply element-wise
        % ii) Sum elements
        % iii) Modulo 2 to keep result binary
        out = mod(sum(G .* buff, 2), 2);
        
        encoded = [encoded, out']; % Append as row vector
    end
end

function [received, transmitted] = bpsk_awgn_channel(ip, EbN0_dB, rate)
    EbN0 = 10^(EbN0_dB / 10);       % Convert dB to linear scale
    EsN0 = EbN0 * rate;             % Symbol energy to noise ratio
    sigma = sqrt(1 / (2 * EsN0));   % Standard deviation of noise
    
    transmitted = 1 - 2 * ip;       % BPSK mapping: 0 -> +1, 1 -> -1
    noise = sigma * randn(size(transmitted));
    received = transmitted + noise;
end
